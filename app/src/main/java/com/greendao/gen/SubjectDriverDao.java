package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.actor.cnpc_qhse_exams.bean.SubjectDriver;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUBJECT_DRIVER".
*/
public class SubjectDriverDao extends AbstractDao<SubjectDriver, Long> {

    public static final String TABLENAME = "SUBJECT_DRIVER";

    /**
     * Properties of entity SubjectDriver.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChapterType = new Property(1, int.class, "chapterType", false, "CHAPTER_TYPE");
        public final static Property SubjectType = new Property(2, int.class, "subjectType", false, "SUBJECT_TYPE");
        public final static Property Subject = new Property(3, String.class, "subject", false, "SUBJECT");
        public final static Property Options = new Property(4, String.class, "options", false, "OPTIONS");
        public final static Property Answer = new Property(5, String.class, "answer", false, "ANSWER");
        public final static Property Analysis = new Property(6, String.class, "analysis", false, "ANALYSIS");
    }


    public SubjectDriverDao(DaoConfig config) {
        super(config);
    }
    
    public SubjectDriverDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBJECT_DRIVER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHAPTER_TYPE\" INTEGER NOT NULL ," + // 1: chapterType
                "\"SUBJECT_TYPE\" INTEGER NOT NULL ," + // 2: subjectType
                "\"SUBJECT\" TEXT NOT NULL ," + // 3: subject
                "\"OPTIONS\" TEXT," + // 4: options
                "\"ANSWER\" TEXT NOT NULL ," + // 5: answer
                "\"ANALYSIS\" TEXT);"); // 6: analysis
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBJECT_DRIVER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SubjectDriver entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getChapterType());
        stmt.bindLong(3, entity.getSubjectType());
        stmt.bindString(4, entity.getSubject());
 
        String options = entity.getOptions();
        if (options != null) {
            stmt.bindString(5, options);
        }
        stmt.bindString(6, entity.getAnswer());
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(7, analysis);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SubjectDriver entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getChapterType());
        stmt.bindLong(3, entity.getSubjectType());
        stmt.bindString(4, entity.getSubject());
 
        String options = entity.getOptions();
        if (options != null) {
            stmt.bindString(5, options);
        }
        stmt.bindString(6, entity.getAnswer());
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(7, analysis);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SubjectDriver readEntity(Cursor cursor, int offset) {
        SubjectDriver entity = new SubjectDriver();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SubjectDriver entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChapterType(cursor.getInt(offset + 1));
        entity.setSubjectType(cursor.getInt(offset + 2));
        entity.setSubject(cursor.getString(offset + 3));
        entity.setOptions(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAnswer(cursor.getString(offset + 5));
        entity.setAnalysis(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SubjectDriver entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SubjectDriver entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SubjectDriver entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
